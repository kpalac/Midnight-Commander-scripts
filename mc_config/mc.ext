# Midnight Commander 3.0 extension file
# Warning: Structure of this file has changed completely with version 3.0
#
# All lines starting with # or empty lines are thrown away.
# Lines starting in the first column should have following format:
#
# keyword/descNL, i.e. everything after keyword/ until new line is desc
#
# keyword can be:
#
#    shell (desc is, when starting with a dot, any extension (no wildcars),
#          i.e. matches all the files *desc . Example: .tar matches *.tar;
#          if it doesn't start with a dot, it matches only a file of that name)
#
#    shell/i (desc is, when starting with a dot, any extension (no wildcars),
#          The same as shell but with case insensitive.
#
#    regex (desc is an extended regular expression)
#          Please note that we are using the GNU regex library and thus
#          \| matches the literal | and | has special meaning (or) and
#          () have special meaning and \( \) stand for literal ( ).
#
#    regex/i (desc is an extended regular expression)
#          The same as regex but with case insensitive.
#
#    type  (file matches this if `file %f` matches regular expression desc
#          (the filename: part from `file %f` is removed))
#
#    type/i (file matches this if `file %f` matches regular expression desc)
#          The same as type but with case insensitive.
#
#    directory (matches any directory matching regular expression desc)
#
#    include (matches an include directive)
#
#    default (matches any file no matter what desc is)
#
# Other lines should start with a space or tab and should be in the format:
#
# keyword=commandNL (with no spaces around =), where keyword should be:
#
#    Open (if the user presses Enter or doubleclicks it),
#
#    View (F3), Edit (F4)
#
#    Include is the keyword used to add any further entries from an include/
#    section
#
# command is any one-line shell command, with the following substitutions:
#
# %% -> % character
# %p -> name of the current file (without path, but pwd is its path).
#       Also provided to external application as MC_EXT_BASENAME
#       global variable
# %f -> name of the current file. Unlike %p, if file is located on a
#	non-local virtual filesystem, i.e. either tarfs or ftpfs,
#	then the file will be temporarily copied into a local directory
#	and %f will be the full path to this local temporal file.
#	If you don't want to get a local copy and want to get the
#	virtual fs path (like /#ftp:ftp.cvut.cz/pub/hungry/xword), then
#	use %d/%p instead of %f.
#       Also provided to external application as MC_EXT_FILENAME
#       global variable
# %d -> name of the current directory (pwd, without trailing slash)
#       Also provided to external application as MC_EXT_CURRENTDIR
#       global variable
# %s -> "selected files", i.e. space separated list of tagged files if any
#       or name of the current file.
#       Also provided to external application as MC_EXT_SELECTED
#       global variable
# %t -> list of tagged files
#       Also provided to external application as MC_EXT_ONLYTAGGED
#       global variable
# %u -> list of tagged files (they'll be untaged after the command)
#
# (If these 6 letters are in uppercase, they refer to the other panel.
# But you shouldn't have to use it in this file.)
#
#
# %cd -> the rest is a path mc should change into (cd won't work, since it's
#	a child process).  %cd handles even vfs names.
#
# %view -> the command you type will be piped into mc's internal file viewer
#	if you type only the %view and no command, viewer will load %f file
#	instead (i.e. no piping, so it is different to %view cat %f)
#	%view may be directly followed by {} with a list of any of
#	ascii (Ascii mode), hex (Hex mode), nroff (color highlighting for
#	text using backspace for bold and underscore) and unform
#	(no highlighting for nroff sequences) separated by commas.
#
# %var -> You use it like this: %var{VAR:default}.  This macro will expand
#       to the value of the VAR variable in the environment if it's set
#       otherwise the value in default will be used.  This is similar to
#       the Bourne shell ${VAR-default} construct.
#
# Rules are applied from top to bottom, thus the order is important.
# If some actions are missing, search continues as if this target didn't
# match (i.e. if a file matches the first and second entry and View action
# is missing in the first one, then on pressing F3 the View action from
# the second entry will be used. default should catch all the actions.
#
# Any new entries you develop for you are always welcome if they are
# useful on more than one system.  You can post your modifications
# as tickets at www.midnight-commander.org


### Changes ###
#
# Reorganization: 2012-03-07 Slava Zanko <slavazanko@gmail.com>



### Untypical files
type/ISO-8859\ text
	View=(%view{ascii} /bin/cat -v %f)


### GIT Repo ###
# gitfs changeset
regex/^\[git\]
	Open=%cd %p/changesetfs://
	View=%cd %p/patchsetfs://

### Archives ###

# .tgz, .tpz, .tar.gz, .tar.z, .tar.Z, .ipk, .gem
regex/\.t([gp]?z|ar\.g?[zZ])$|\.ipk$|\.gem$
	Open=%cd %p/utar://
	View=(%view{ascii} /bin/gzip -cd %f 2>/dev/null | /bin/tar -tvvf -)

shell/.tar.bz
	# Open=%cd %p/utar://
	View=(%view{ascii} /bin/bzip -cd %f 2>/dev/null | /bin/tar -tvvf -)

regex/\.t(ar\.bz2|bz2?|b2)$
	Open=%cd %p/utar://
	View=(%view{ascii} /bin/bzip2 -cd %f 2>/dev/null | /bin/tar -tvvf -)

# .tar.lzma, .tlz
regex/\.t(ar\.lzma|lz)$
	Open=%cd %p/utar://
	View=(%view{ascii} /usr/bin/lzma -cd %f 2>/dev/null | /bin/tar -tvvf -)

# .tar.xz, .txz
regex/\.t(ar\.xz|xz)$
	Open=%cd %p/utar://
	View=(%view{ascii} /usr/bin/xz -cd %f 2>/dev/null | /bin/tar -tvvf -)

# .tar.F - used in QNX
shell/.tar.F
	# Open=%cd %p/utar://
	View=(%view{ascii} freeze -cd %f 2>/dev/null | /bin/tar -tvvf -)

# .qpr/.qpk - QNX Neutrino package installer files
shell/.qp[rk]$
	Open=%cd %p/utar://
	View=(%view{ascii} /bin/gzip -cd %f 2>/dev/null | /bin/tar -tvvf -)


# tar
shell/i/.tar
	Open=%cd %p/utar://
	View=(%view{ascii} /bin/tar tvvf - < %f)

# lha
type/^LHa\ .*archive
	Open=%cd %p/ulha://
	View=(%view{ascii} lha l %f )

# arj
regex/i/\.a(rj|[0-9][0-9])$
	Open=%cd %p/uarj://
	View=(%view{ascii} arj l %f || unarj l %F)

# cab
shell/i/.cab
	Open=%cd %p/ucab://
	View=(%view{ascii} /usr/bin/cabextract -l %f )

# ha
shell/i/.ha
	Open=%cd %p/uha://
	View=(%view{ascii} /usr/bin/ha lf %f )

# rar
type/^RAR\ archive
	Open=%cd %p/urar://
	View=(%view{ascii} (/usr/bin/rar v -c- %f 2>/dev/null || /usr/bin/unrar v -c- %f 2>/dev/null))


# ALZip
shell/i/.alz
	Open=%cd %p/ualz://
	View=(%view{ascii} unalz -l %f)

# cpio
shell/i/.cpio.Z
	Open=%cd %p/ucpio://
	View=(%view{ascii} /bin/gzip -dc %f | cpio -itv 2>/dev/null)


shell/i/.cpio.xz
	Open=%cd %p/ucpio://
	View=(%view{ascii} /usr/bin/xz -dc %f | cpio -itv 2>/dev/null)

shell/i/.cpio.gz
	Open=%cd %p/ucpio://
	View=(%view{ascii} /bin/gzip -dc %f | cpio -itv 2>/dev/null)

shell/i/.cpio
	Open=%cd %p/ucpio://
	View=(%view{ascii} cpio -itv %f 2>/dev/null)


# 7zip archives (they are not man pages)
shell/i/.7z
	Open=%cd %p/u7z://
	View=(%view{ascii} (/usr/bin/7za l %f 2>/dev/null || /usr/bin/7z l %f))



# patch
regex/\.(diff|patch)(\.(bz|Z))$
	Open=%cd %p/patchfs://
	View=(%view{ascii} /bin/bzip2 -dc %f 2>/dev/null)

regex/\.(diff|patch)(\.(gz|Z))$
	Open=%cd %p/patchfs://
	View=(%view{ascii} /bin/gzip -dc %f 2>/dev/null)


# ls-lR
regex/(^|\.)ls-?lR(\.gz|Z|bz2)$
	Open=%cd %p/lslR://



# trpm
shell/.trpm
	Open=%cd %p/trpm://
	View=(%view{ascii} rpm -qivl --scripts "$(/usr/bin/basename %f .trpm)")

# RPM packages (SuSE uses *.spm for source packages)
regex/\.(src\.rpm|spm)$
	Open=%cd %p/rpm://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view src.rpm

shell/.rpm
	Open=%cd %p/rpm://
	View=%view{ascii} /usr/lib/mc/ext.d/package.sh view rpm


# ISO9660
#shell/i/.iso
type/^ISO\ 9660
	Open=%cd %p/iso9660://
	View=(%view{ascii} /usr/bin/isoinfo -d -i %f)
type/ISO\ 9660
	Open=%cd %p/iso9660://
	View=(%view{ascii} (/usr/bin/isoinfo -d -i %f && /usr/bin/isoinfo -l -R -J -i %f))

#IMG
type/^DOS/MBR\ boot\ sector
	View=(%view{ascii} /usr/bin/7z l %f)


regex/\.(diff|patch)$
	Open=%cd %p/patchfs://
	View=(%view{ascii} /bin/cat %f 2>/dev/null)

# ar library
regex/\.s?a$
	Open=%cd %p/uar://
	#Open=%view{ascii} ar tv %f
	View=(%view{ascii} (/usr/bin/file %f && /usr/bin/nm -C %f))

# gplib
shell/i/.lib
	Open=%cd %p/ulib://
	View=(%view{ascii} /usr/bin/gplib -t %f | /usr/bin/perl -e 'while (<>) { @a=split /[\s\t]+/, $_; printf ("%-30s | %10d | %s.%s.%02d | %s\n", $a[0], ($a[1]*1),$a[7], lc($a[4]), $a[5], $a[6]);}')

# Mailboxes
type/^ASCII\ mail\ text
	Open=%cd %p/mailfs://


### Sources ###

# C/C++
regex/i/\.(c|cc|cpp)$
	Include=editor

# C/C++ header
regex/i/\.(h|hh|hpp)$
	Include=editor

# Fortran
shell/i/.f
	Include=editor

# Assembler
regex/i/\.(s|asm)$
	Include=editor

include/editor
	Open=%var{EDITOR:editor} %f

# .so libraries
regex/\.(so|so\.[0-9\.]*)$
	View=(%view{ascii} (/usr/bin/file %f && /usr/bin/nm -C -D %f))




# Object and executables
type/^ELF
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))
type/^COFF
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))
type/^AIF
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))
type/^ECOFF
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))
type/^PE32\ executable
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))
type/^PE64\ executable
	View=(%view{ascii} (/usr/bin/file -b %f && /usr/bin/nm -C %f 2>/dev/null; printf "\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))

type/^Bourne-Again\ shell\ script
	View=(%view{ascii} (/bin/cat %f 2>/dev/null; printf "\n\n\n\t\t\t\t-----------------  END OF FILE -----------------\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))

type/^POSIX\ shell\ script
	View=(%view{ascii} (/bin/cat %f 2>/dev/null; printf "\n\n\n\t\t\t\t-----------------  END OF FILE -----------------\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))

type/script,\ ASCII\ text\ executable
	View=(%view{ascii} (/bin/cat %f 2>/dev/null; printf "\n\n\n\t\t\t\t-----------------  END OF FILE -----------------\n\n\n\n\n"; [ "$(/usr/bin/whatis %f 2> /dev/null)" != "" ] && /usr/bin/man %f 2>/dev/null))


# DEB package
type/^Debian\ binary\ package
	View=(%view{ascii} /usr/bin/dpkg-deb -c %f)


### Documentation ###

# Texinfo
#regex/\.(te?xi|texinfo)$

# GNU Info page
type/^Info\ text
 	Open=(/usr/bin/info -f %f)
	View=(%view{ascii} /usr/bin/info -f %f)

shell/.info
 	Open=(/usr/bin/info -f %f)
	View=(%view{ascii} /usr/bin/info -f %f)

# Exception: .3gp are video files not manual pages
shell/i/.3gp
	Include=video


# Perl pod page
shell/.pod
	View=(%view{ascii,nroff} /usr/bin/pod2man %f | nroff -c -Tlatin1 -mandoc)

# Troff with me macros.
# Exception - "read.me" is not a nroff file.
shell/read.me
	Open=
	View=

shell/.me
	Open=(%view{ascii,nroff} nroff -c -Tlatin1 -me %f)
	View=(%view{ascii,nroff} nroff -c -Tlatin1 -me %f)

# Troff with ms macros.
shell/.ms
	Open=(%view{ascii,nroff} nroff -c -Tlatin1 -ms %f)
	View=(%view{ascii,nroff} nroff -c -Tlatin1 -ms %f)

# Manual page - compressed
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.g?[Zz]$
	Open=/usr/lib/mc/ext.d/text.sh open man.gz %var{PAGER:more}
	View=(%view{ascii,nroff} nroff -c -Tlatin1 -ms %f)

	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.gz %var{PAGER:more}

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz$
	Open=/usr/lib/mc/ext.d/text.sh open man.bz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.bz %var{PAGER:more}

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz2$
	Open=/usr/lib/mc/ext.d/text.sh open man.bz2 %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.bz2 %var{PAGER:more}

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
	Open=/usr/lib/mc/ext.d/text.sh open man.lzma %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.lzma %var{PAGER:more}

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
	Open=/usr/lib/mc/ext.d/text.sh open man.xz %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man.xz %var{PAGER:more}

# CHM
shell/i/.chm
	Open=/usr/lib/mc/ext.d/text.sh open chm


### Miscellaneous ###

# Compiled Java classes
shell/.class
	View=(%view{ascii} jad -p %f 2>/dev/null)

# Makefile
regex/[Mm]akefile$
	Open=make -f %f %{Enter parameters}

# Imakefile
shell/Imakefile
	Open=/usr/lib/mc/ext.d/misc.sh open imakefile

# Makefile.PL (MakeMaker)
regex/^Makefile.(PL|pl)$
	Open=%var{PERL:perl} %f

# dbf
shell/i/.dbf
	Open=/usr/lib/mc/ext.d/misc.sh open dbf
	View=(%view{ascii} /usr/bin/dbview -b %f)

# REXX script
regex/\.(rexx?|cmd)$
       Open=rexx %f %{Enter parameters};echo "Press ENTER";read y

# Disk images for Commodore computers (VIC20, C64, C128)
shell/i/.d64
	Open=%cd %p/uc1541://
	View=%view{ascii} c1541 %f -list
	Extract=c1541 %f -extract

# Glade, a user interface designer for GTK+ and GNOME
#shell/i/.glade
#	Open=/usr/lib/mc/ext.d/misc.sh open glade

# Gettext Catalogs
shell/.mo
	View=(%view{ascii} (/usr/bin/msgunfmt %f || /bin/cat %f))

# lyx
shell/i/.lyx
	Open=/usr/lib/mc/ext.d/misc.sh open lyx
	View=%view{ascii} /usr/bin/lyxcat %f

# torrent
shell/i/.torrent
	View=(%view{ascii} /usr/bin/ctorrent -x %f 2>/dev/null)



### Plain compressed files ###

# ace
shell/i/.ace
	Open=%cd %p/uace://
	View=(%view{ascii} unace l %f)
	Extract=unace x %f

# arc
shell/i/.arc
	Open=%cd %p/uarc://
	View=(%view{ascii} arc l %f)
	Extract=arc x %f '*'
	Extract (with flags)=I=%{Enter any Arc flags:}; if test -n "$I"; then arc x $I %f; fi


# jar(zip)
type/i/^Java\ Jar\ file\ data\ \(zip\)
	Open=%cd %p/uzip://
	View=(%view{ascii} /usr/bin/unzip -v %f)

# zoo
shell/i/.zoo
	Open=%cd %p/uzoo://
	View=(%view{ascii} zoo l %f)



# GUI


# Link
type/^symbolic\ link
	View=(%view{ascii} /usr/bin/file -b %f)



# Types


### MC Plugins ###



### Images ###

type/^GIF
    Include=image
type/^JPEG
    Include=image
type/^PC\ bitmap
    Include=bitmap
type/^PNG
    Include=image
type/^JNG
    Include=image
type/^MNG
    Include=image
type/^TIFF
    Include=image
type/^PBM
    Include=image
type/^PGM
    Include=image
type/^PPM
    Include=image
type/^Netpbm
    Include=image
shell/.xcf
    Include=bitmap
shell/.xbm
    Include=bitmap
shell/.xpm
    Include=bitmap
shell/.ico
    Include=bitmap
type/^SVG
	Include=bitmap
type/^PCX
    Include=bitmap
shell/.svg
    Include=bitmap



## Audio files ###

type/i/^audio\ file
	Include=audio
type/^MPEG\ ADTS
	Include=audio
type/i/^Ogg\ data,\ Vorbis\ audio
	Include=audio
type/i/^RIFF\ (little-endian)\ data,\ WAVE\ audio
	Include=audio
regex/i/\.(wav|snd|voc|au|smp|aiff|snd|m4a|ape|aac|wv|wma)$
	Include=audio
regex/i/\.(mod|s3m|xm|it|mtm|669|stm|ult|far)$
	Include=audio






### Videos ###
type/i/^RIFF
	Include=video
type/i/^Matroska\ data
	Include=video
shell/i/.avi
    Include=video
regex/i/\.as[fx]$
    Include=video
shell/i/.divx
    Include=video
shell/i/.mkv
    Include=video
regex/i/\.(mov|qt)$
    Include=video
regex/i/\.(mp4|m4v|mpe?g)$
    Include=video
# MPEG-2 TS container + H.264 codec
shell/i/.mts
    Include=video
shell/i/.ts
    Include=video
shell/i/.vob
    Include=video
shell/i/.wmv
    Include=video
regex/i/\.fl[icv]$
    Include=video
shell/i/.ogv
    Include=video
regex/i/\.ra?m$
    Include=video
shell/i/.webm
    Include=video
type/WebM
    Include=video


### Documents ###


type/i/^PDF
	View=(%view{ascii} /usr/local/bin/mcpdfview.sh %f)
type/i/^AppleSingle\ encoded\ Macintosh\ file
	View=(%view{ascii} /usr/local/bin/mcpdfview.sh %f)


type/^HTML\ document
	View=(%view{ascii} /usr/bin/w3m -dump %f)
#type/^XML\ document
#	View=(%view{ascii} /usr/bin/w3m -dump %f)

shell/i/.xls
	Include=xls
shell/i/.xlsx
	View=(%view{ascii} /usr/local/bin/mcxlsxparse.pl %f)
	
type/i/^Composite\ Document\ File
	Include=1doc
type/^Microsoft\ Word
	Include=docx
type/i/^Microsoft\ OOXML
	Include=docx
type/^OpenDocument\ Text
	Include=odt
shell/i/.odt
	Include=odt
type/^OpenDocument\ Spreadsheet
	View=(%view{ascii} /usr/local/bin/mcodsparse.pl %f)
type/^OpenDocument
	Include=off
type/^Microsoft\ Office\ Document
	Include=docx
type/^Microsoft\ Excel
	Include=xls
type/^Microsoft\ PowerPoint
	Include=off
type/^Microsoft\ Access\ Database
	Include=off
shell/i/.mdb
	Include=off
type/^EPUB\ document
	View=(%view{ascii} /usr/local/bin/mcepubparse.pl text %f)
type/XPS
	View=(%view{ascii} /usr/local/bin/mcpdfview.sh %f)
type/^PostScript\ document
	View=(%view{ascii} /usr/local/bin/mcpsview.sh %f)
type/^DjVu
	View=(/usr/local/bin/mcdjvuviewer.sh %t > /dev/null 2>&1 &)
type/^LaTeX
	View=(%view{ascii} /usr/bin/untex %f)
type/^TeX
	View=(%view{ascii} /usr/bin/untex %f)
type/^Rich\ Text\ Format
	View=(%view{ascii} /usr/bin/unrtf --text %f | /bin/cat -v)

type/^SQLite\ Write-Ahead\ Log
	View=(%view{ascii} /bin/cat %f)
type/^SQLite
	View=(%view{ascii} /usr/local/bin/mcsqliteview.sh %f)
type/^SMTP\ mail
	View=(%view{ascii} /usr/local/bin/mcmailparse.pl %f)
type/^Berkeley\ DB
	View=(%view{ascii} /usr/bin/db_dump -r %f)



# Includes
include/image
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(/usr/local/bin/mcfehview.sh %f > /dev/null 2>&1 &)

include/bitmap
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(/usr/local/bin/mcim6view.sh %f > /dev/null 2>&1 &)


include/audio
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &2)
	View=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)

include/video
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(/usr/loalc/bin/mcopen -- %f > /dev/null 2>&1 &)

include/off
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(/usr/local/bin/mcopen -w -- %f)



include/1doc
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(%view{ascii} /usr/bin/antiword %f)

include/docx
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(%view{ascii} /usr/local/bin/mcdocxparse.pl %f)


include/odt
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(%view{ascii} /usr/local/bin/mcodtparse.pl %f)

include/xls
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(%view{ascii} /usr/bin/xls2csv %f)

include/ppt
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	Edit=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	View=(%view{ascii} /usr/bin/catppt %f)


# Manual page - problematic - so at the end
regex/(([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])|\.man)$
	Open=/usr/lib/mc/ext.d/text.sh open man %var{PAGER:more}
	View=%view{ascii,nroff} /usr/lib/mc/ext.d/text.sh view man %var{PAGER:more}

# zip - many formats are compressed, so this is at the end
type/i/^zip\ archive
	Open=%cd %p/uzip://
	View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zip
# gzip
type/^gzip
	Open=/bin/gzip -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /bin/gzip -dc %f 2>/dev/null)
shell/i/.gz
	Open=/bin/gzip -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /bin/gzip -dc %f 2>/dev/null)

regex/\.(gz|Z)$
	View=(%view{ascii} /bin/gzip -dc %f 2>/dev/null)

# bzip2
type/^bzip2
	Open=/bin/bzip2 -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /bin/bzip2 -dc %f 2>/dev/null)

regex/\.bz2?$
	View=(%view{ascii} /bin/bzip2 -dc %f 2>/dev/null)


# bzip
type/^bzip
	Open=/bin/bzip2 -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /bin/bzip2 -dc %f 2>/dev/null)

# compress
type/^compress
	Open=/bin/gzip -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /bin/gzip -dc %f 2>/dev/null)

# lzma
regex/\.lzma$
	Open=lzma -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} lzma -dc %f 2>/dev/null)

# xz
regex/\.xz$
	Open=/usr/bin/xz -dc %f 2>/dev/null %var{PAGER:more}
	View=(%view{ascii} /usr/bin/xz -dc %f 2>/dev/null)

# Parity Archive
type/^Parity\ Archive\ Volume\ Set
	Open=par2 r %f


### Default ###

# Default target for anything not described above
default/*
	Open=(/usr/local/bin/mcopen -- %f > /dev/null 2>&1 &)
	
### EOF ###
