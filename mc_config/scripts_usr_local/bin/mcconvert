#!/bin/bash


#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#  Author: Karol Pa≈Çac (lolko), palac.karol@gmail.com



# File converter. Helper for Midnight Commander






. /usr/local/lib/mcglobals




if [ "$1" = "help" ]; then
T_HELP="

mcconvert [extension] [files]:

    Convert files between various formats using tools installed on system. Extension marks target format
    Tools used are LibreOffice, Pandoc, Calibre ebook converter, convert (ImageMagick), FFMpeg, and ATool archiver

    Multiple files are copied to new directory. Single file is simply converted in current directory.



    EXTENSION:

	Supported formats:

	    Documents:		odt, ott, doc, docx, xls, xxls, ppt, pptx, txt, html, htm, rtf, and more...
	    Images:		png, jpg, bmp, pcx, svg, xpm, and more...
	    Ebooks:		pdf, epub, mobi, djvu
	    Audio:		mp3, mpeg3, wav, midi, and more...
	    Video:		mkv, avi, rmvb, wmv, mpeg, and more...
	    Archives:		zip, rar, tar, 7z, arj, cab, gz, bz, and more...
	    youtube:		converts to YT-friendly .mkv format



"
    printf %s "$T_HELP"
    exit 2
fi




if [ "$1" = "" ]; then
    printf '\n\n'%s'\n\n' "No target format given..."
    exit 1
fi

if [ ! -f "$2" ]; then
    printf '\n\n'%s'\n\n' "No files to convert given..."
    exit 1
fi




TARGET="$1"
shift
if [[ "$TARGET" == "."* ]]; then
    TARGET="${TARGET:1}"
fi
TARGET="${TARGET,,}"




TIMESTAMP="$(/bin/date +"%Y-%m-%d %H:%m:%S")"

if [ "$2" != "" ]; then
    MANY="T"
    MANY_DIR="$PWD/Converted_on_$TIMESTAMP/"
    /bin/mkdir "$MANY_DIR"
else
    MANY="F"
fi










TF_GetType () {

    SFILE_M="$@"
    if [ "$TEMP_GLOBS" = "" ]; then
	TEMP_GLOBS="$(< "/usr/share/mime/globs")"
    fi

    printf %s'\n\n' "Getting Mimetype for $BASE:	"
    MIMETYPE="$(/usr/bin/mimetype -b "$SFILE_M")"
    MIMETYPE="${MIMETYPE//\//\\\/}"
    EXT="$(printf %s "$TEMP_GLOBS" | /usr/bin/awk -F'*.' '/'$MIMETYPE'/ {print $2}' )"
    printf "$MIMETYPE\n\n"

} #Get type









TF_TryComm () {

    [ "$MATCH" = "T" ] && return 0
    COMM="$1"

    #Substitute
    SFILE_TMP="${SFILE//\"/\\\"}"
    COMM="${COMM//%s/$SFILE_TMP}"

    STARGET_TMP="$MANY_DIR$TARGET_FILE"
    STARGET_TMP="${STARGET_TMP//\"/\\\"}"
    COMM="${COMM//%t/$STARGET_TMP}"
    COMM="${COMM//%%/%}"
    EXEC="${COMM%% *}"
    shift

    #Get display name
    C_NAME="$@"

    printf "Trying \e[1;39m$C_NAME\e[0;39m...    "

    printf "$COMM"

    if [ -x "$EXEC" ]; then
	eval "$COMM"
	if [ "$?" = "0" ]; then
	    printf "\e[1;39mSuccess\e[0;39m\n\n"
	    MATCH="T"
	else
	    MATCH="F"
	fi
    else
	printf "\e[1;39m$C_NAME\e[0;39m not installed on this system...\n\n"
	MATCH="F"
    fi

} #TF_TryComm








TF_ErrInf () {
    if [ "$MATCH" != "T" ]; then
	printf %s'\n\n' "No valid converters found..."
	ERROR="1"
    fi
} #ErrInf

TF_ErrInv () {
    printf "Conversion from \e[1;39m$EXT\e[0;39m to \e[1;39m$TARGET\e[0;39m not supported!\n\n"
    ERROR="1"
} #ErrInv





ERROR="0"
while [ -n "$1" ]; do

    SFILE="$1"
    SFILE="$(/bin/readlink -f "$SFILE")"
    DIR="${SFILE%/*}}"
    SBASE="${SFILE##*/}"
    BASE="${SBASE%.*}"
    TF_GetType "$SFILE"
    shift

    MATCH="F"
    if [ "$MANY" = "F" ]; then
	TARGET_FILE="$(MCF_FileName "$PWD" "$BASE"."$TARGET")"
    elif [ "$MANY" = "T" ]; then
	TARGET_FILE="$(MCF_FileName "$MANY_DIR" "$BASE"."$TARGET")"
    fi

    if [ "$TARGET" = "$EXT" ]; then
	printf %s'\n\n' "Same formats..."
    fi


    printf "Checking for suitable tool to convert\e[1;39m $SBASE\e[0;39m to\e[1;39m $TARGET\e[0;39m...\n\n"


    #Binary choices
    if [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" =~ (ps|eps) ]]; then
	    TF_TryComm "/usr/bin/ps2ascii \"%s\" \"%t\"" "GhostScript (ps2ascii)"
	    TF_TryComm "/usr/bin/pstotext \"%s\" \"%t\"" "PSToText"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" =~ (pdf|pdf[1234]|xpdf) ]]; then
	    TF_TryComm "/usr/bin/pdftotext \"%s\" \"%t\"" "PDFtoText"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (xml|html|htm|png) && "$EXT" =~ (pdf|pdf[1234]|xpdf) ]]; then
	    TF_TryComm "/usr/bin/pdftohtml \"%s\" \"%t\"" "PDFtoHTML"
	    TF_ErrInf

    elif [[ "$TARGET" = "djvu" && "$EXT" =~ (pdf|pdf[1234]|xpdf) ]]; then
	    TF_TryComm "/usr/bin/pdf2djvu -o \"%t\" \"%s\"" "Pdf2DJVU"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (pdf|pdf[1234]|xpdf) && "$EXT" =~ (ps|eps) ]]; then
	    TF_TryComm "/usr/bin/ps2pdfwr \"%s\" \"%t\"" "GhostScript (ps2pdfwr)"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (ps|eps) && "$EXT" =~ (pdf|pdf[1234]|xpdf) ]]; then
	    TF_TryComm "/usr/bin/pdf2ps \"%s\" \"%t\"" "GhostScript (pdf2ps)"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" = "epub" ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" *.html | /usr/bin/lynx -dump -stdin > \"%t\"" "ZIP+Lynx"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (html|htm) && "$EXT" = "epub" ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" *.html > \"%t\"" "ZIP+Lynx"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ (pdf|pdf[1234]|xpdf|epub|ps|eps|djvu|djv|mobi) ]]; then
	    TF_TryComm "/usr/bin/ebook2epub \"%s\" \"%t\"" "EBook2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ "pages" ]]; then
	    TF_TryComm "/usr/bin/pages2epub \"%s\" \"%t\"" "Pages2EPUB"
	    TF_TryComm "/usr/bin/ebook2epub \"%s\" \"%t\"" "EBook2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ "mwaw" ]]; then
	    TF_TryComm "/usr/bin/mwaw2epub \"%s\" \"%t\"" "MWAW2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ "wps" ]]; then
	    TF_TryComm "/usr/bin/wps2epub \"%s\" \"%t\"" "WPS2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ "wpd" ]]; then
	    TF_TryComm "/usr/bin/wpd2epub \"%s\" \"%t\"" "WPD2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$TARGET" =~ "epub" && "$EXT" =~ "abw" ]]; then
	    TF_TryComm "/usr/bin/abw2epub \"%s\" \"%t\"" "ABW2EPUB"
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf
    elif [[ "$EXT" =~ "(tex|latex)" ]]; then
	    
	    if [[ "$TARGET" =~ (htm|html) ]]; then
		TF_TryComm "/usr/bin/tth \"%s\" > \"%t\"" "TTH"
	    elif [[ "$TARGET" == "txt" ]]; then
		TF_TryComm "/usr/bin/untex \"%s\" > \"%t\"" "untex"
	    elif [[ "$TARGET" == "gif" ]]; then
		TF_TryComm "/usr/bin/latex2gif \"%s\" > \"%t\"" "Latex2Gif (tth)"
	    else
		TF_ErrInf
	    fi
    elif [ "$EXT" = "xml" ]; then
	    TF_TryComm "/usr/bin/xmlto -o \"$MANY_DIR\" "$TARGET" \"%s\"" "XmlTo"
	    TF_ErrInf

    #Default ebook convert with Calibre
    elif [[ "$TARGET" =~ (pdf|pdf[1234]|xpdf|epub|ps|eps|djvu|djv|mobi) && "$EXT" =~ (pdf|pdf[1234]|xpdf|epub|ps|eps|djvu|djv|mobi) ]]; then
	    TF_TryComm "/usr/bin/ebook-convert \"%s\" \"%t\" --enable-heuristics" "Calibre (ebook-convert)"
	    TF_ErrInf


    #Plaintext conversion
    elif [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" =~ (doc|dot|dom) ]]; then
	    TF_TryComm "/usr/bin/antiword -w 0 -i 1 \"%s\" > \"%t\"" "AntiWord"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii|csv) && "$EXT" =~ (xlsx) ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" xl/sharedStrings.xml xl/worksheets/*.xml | /usr/local/lib/tcmxlsxparse.pl > \"%t\"" "TCM Inbuilt"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii|csv) && "$EXT" =~ (xls) ]]; then
	    TF_TryComm "/usr/bin/xls2csv \"%s\" > \"%t\"" "xls2csv"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf



    elif [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" =~ (o[td]t) ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" content.xml | /usr/local/lib/tcmodtparse.pl > \"%t\"" "TCM Inbuilt"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii|csv) && "$EXT" =~ (o[td]s) ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" content.xml | /usr/local/lib/tcmodsparse.pl > \"%t\"" "TCM Inbuilt"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf

    elif [[ "$TARGET" =~ (txt|text|ascii) && "$EXT" =~ (docx) ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" word/document.xml | /usr/local/lib/tcmdocxparse.pl > \"%t\"" "TCM Inbuilt"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf


    elif [[ "$TARGET" =~ (txt|text|ascii|csv) && "$EXT" =~ (xlsx) ]]; then
	    TF_TryComm "/usr/bin/unzip -p \"%s\" xl/sharedStrings.xml xl/worksheets/*.xml | /usr/local/lib/tcmxlsxparse.pl > \"%t\"" "TCM Inbuilt"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf



    #More General...
    elif [[ "$TARGET" =~ (rtf|txt|[o][dto][tsgcpifmh]|do[tc]|doc[xXmM]|xls|xxls|p[pt]s|p[pt]s[xmt]|text|asc|htm|html|123|uo[tsp]|slk|csv|dif|s[dx][acdw]|pdf|pdf[1234]|xpdf) ]]; then
	if [[ "$EXT" =~ (rtf|txt|[o][dto][tsgcpifmh]|do[tc]|doc[xXmM]|xls|xxls|p[pt]s|p[pt]s[xmt]|text|asc|htm|html|123|uo[tsp]|slk|csv|dif|s[dx][acdw]) ]]; then
	    MANY_DIR="$PWD/Converted_on_$TIMESTAMP/"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi

    elif [[ "$TARGET" =~ (jpg|jpeg|png) ]]; then
	if [[ "$EXT" =~ (rtf|txt|[o][dto][tsgcpifmh]|do[tc]|doc[xXmM]|xls|xxls|p[pt]s|p[pt]s[xmt]|text|asc|htm|html|123|uo[tsp]|slk|csv|dif|s[dx][acdw]) ]]; then
	    MANY_DIR="$PWD/Converted_on_$TIMESTAMP/"
	    TF_TryComm "/usr/bin/libreoffice --convert-to $TARGET --outdir \"$MANY_DIR\" \"%s\"" "LibreOffice"
	    TF_TryComm "/usr/bin/pandoc -s -o \"%t\" \"%s\"" "Pandoc"
	    TF_ErrInf
	elif [[ "$EXT" =~ (jpg|jpeg|png|bmp|gif|tif|pcx|ico|x[pb]m|ppm|pic|ai|icon|screenshot|thumb|thumbnail|raw|bitmap) ]]; then
	    TF_TryComm "/usr/bin/convert \"%s\" \"%t\"" "ImageMagick (convert)"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi

    elif [[ "$TARGET" =~ (bmp|gif|tif|pcx|ico|x[pb]m|ppm|pic|ai|icon|screenshot|thumb|thumbnail|raw|bitmap|svg) ]]; then
	if [[ "$EXT" =~ (jpg|jpeg|png|bmp|gif|tif|pcx|ico|x[pb]m|ppm|pic|ai|icon|screenshot|thumb|thumbnail|raw|bitmap|svg) ]]; then
	    TF_TryComm "/usr/bin/convert \"%s\" \"%t\"" "ImageMagick (convert)"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi

    elif [[ "$TARGET" =~ (mp[123a]|mpga|wav|ogg|midi|cda|apu|raw|mpg3|m2s) ]]; then
	if [[ "$EXT" =~ (mp[123a]|mpga|wav|ogg|midi|cda|apu|raw|mpg3|m2s) ]]; then
	    TF_TryComm "/usr/bin/ffmpeg -i \"%s\" -q:a 0 -q:v 0 \"%t\"" "FFMpeg"
	    TF_ErrInf
	elif [[ "$EXT" =~ (mpg|mpeg|mp4|avi|ogv|mov|wm[va]|webm|rmvb|mkv|mk3d|divx) ]]; then
	    TF_TryComm "/usr/bin/ffmpeg -i \"%s\" -q:a 0 -q:v 0 \"%t\"" "FFMpeg"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi

    elif [[ "$TARGET" =~ (youtube|yt) ]]; then
	if [[ "$EXT" =~ (mpg|mpeg|mp4|avi|ogv|mov|wm[va]|webm|rmvb|mkv|mk3d|divx) ]]; then
	    TF_TryComm "/usr/bin/ffmpeg -i \"%s\" -c:v libx264 -crf 18 -preset slow -pix_fmt yuv420p -c:a copy $MANY_DIR$BASE.mkv" "FFMpeg"
	    TARGET_FILE="$BASE.mkv"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi

    elif [[ "$TARGET" =~ (zip|rar|gz|bz2|tar|tgz|rpm|z|arj|cab|7z|ace|tar.xz|tbz.2|xz) ]]; then
	if [[ "$EXT" =~ (zip|rar|gz|bz2|tar|tgz|rpm|z|arj|cab|7z|ace|tar.xz|tbz.2|xz) ]]; then
	    TF_TryComm "/usr/bin/arepack \"%s\" \"%t\"" "AATool (arepack)"
	    TF_ErrInf
	else
	    TF_ErrInv
	fi


    else
	printf "Convertion to\e[1;39m $TARGET\e[0;39m not supported\n\n"
    fi


done





if [ "$MANY" = "T" ]; then
    if [ "$(/bin/ls -A "$MANY_DIR")" = "" ]; then
	/bin/rmdir -- "$MANY_DIR"
    fi
fi

exit "$ERROR"