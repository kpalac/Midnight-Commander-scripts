#!/bin/bash



#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#  Author: Karol Pałac (lolko), palac.karol@gmail.com





# This is a script to quickly setup systemd services and couple of other things for Midnight Commander menu


. /usr/local/lib/mcCLIinterface





SOPTION="0"
SPAGE="0"
SBASE="0"
SMODE="ALL"

declare -a NAME
declare -a STATUS
declare -a DESCR





TF_GetData ()
{
#list-unit-files 
    TEMP="$(/bin/systemctl -a | /bin/grep '.service' )"
    TEMP="${TEMP//●/}"
    TEMP="${TEMP//.service/}"

    mapfile -t NAME < <(printf %s "$TEMP" | /usr/bin/awk '{print $1}')
    mapfile -t STATUS < <(printf %s "$TEMP" | /usr/bin/awk '{print $2 " " $3 " " $4}')

} #TF_GetData






TF_Redraw ()
{

    WIDTH="$(/usr/bin/tput cols)"
    HEIGHT="$(/usr/bin/tput lines)"

    PUTY="$(( ($HEIGHT / 2) - 10))"
    PUTX="$(( ($WIDTH / 2) - 37))"


    clear

    printfxy $PUTY $PUTX "\e[1;$TEXTCOL			Daemons and Services \e[0;$TEXTCOL"

    I="1"

    for I in 1 2 3 4 5 6 7 8 9 0; do

	J=$(($I+1))
	[ "$J" = "10" ] && J=0
	STATUS_TMP=${STATUS[$((SBASE+I))]}

	if [[ "$STATUS_TMP" == *" running"* ]]; then
	    printfxy $(($PUTY+3+I)) $PUTX 	"\e[1;$TEXTCOL	[$J] ${NAME[$((SBASE+I))]}"
	elif [[ "$STATUS_TMP" == *" active "* ]]; then
	    printfxy $(($PUTY+3+I)) $PUTX 	"\e[0;$TEXTCOL	[$J] ${NAME[$((SBASE+I))]}"
	else
	    printfxy $(($PUTY+3+I)) $PUTX 	"\e[1;$LINECOL	[$J] ${NAME[$((SBASE+I))]}"
	fi

	printfxy $(($PUTY+3+I)) $(($PUTX+50)) "\e[1;$LINECOL     ${STATUS[$((SBASE+I))]}"
    
    done


    printfxy $(($PUTY+15)) $PUTX	"\e[1;$LINECOL	[1-9,0] Choose service		[<,>] $T_PgUp_PgDn"
    printfxy $(($PUTY+17)) $PUTX	"\e[1;$LINECOL	[s] Full service info		[t] Change system Timezone"
    printfxy $(($PUTY+18)) $PUTX	"\e[1;$LINECOL	[a] Edit Anacron file		[l] Change system_Locale"
    printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL	[c] Edit system Crontab		[k] System Keyboard settings"
    printfxy $(($PUTY+20)) $PUTX	"\e[1;$LINECOL					[C] System Keyboard mappings"

    printfxy $(($PUTY+21)) $PUTX	"	[q] Cancel\e[0;$TEXTCOL"

    
} #TF_Redraw













TF_EditServiceRedraw ()
{

    TEMP="$(/bin/systemctl -a | /bin/grep " ${NAME[$1]}.service")"
    DESCR="$(echo "$TEMP" | /usr/bin/awk '{$1=$2=$3=$4=""; printf $0}')"
    STATUS="$(echo "$TEMP" | /usr/bin/awk '{print $2 " " $3 " " $4}')"

    if [ "$STATUS" = "  " ]; then
	STATUS="disabled stopped"
    fi

    WIDTH="$(/usr/bin/tput cols)"
    HEIGHT="$(/usr/bin/tput lines)"

    PUTY="$(( ($HEIGHT / 2) - 5))"
    PUTX="$(( ($WIDTH / 2) - 40))"

    clear

    printfxy $((PUTY-2)) $PUTX		"			\e[1;$TEXTCOL${NAME[$1]} \e[1;$LINECOL($STATUS)\e[0;$TEXTCOL"
    printfxy $PUTY $PUTX		"	$DESCR"

    printfxy $(($PUTY+3)) $PUTX		"\e[1;$LINECOL	[m] Manual Page"
    printfxy $(($PUTY+5)) $PUTX		"	[1] Enable			[2] Disable\n"
    printfxy $(($PUTY+6)) $PUTX		"	[3] Start			[4] Stop		[j] Journal\n\n"
    printfxy $(($PUTY+8)) $PUTX		"	[5] Reload configuration	[6] Reload Daemon	[7] Restart\n"
    printfxy $(($PUTY+9)) $PUTX		"	[8] Restore defaults		[9] Mask		[0] Unmask\n\n"
    printfxy $(($PUTY+11)) $PUTX	"	[q] Back\e[0;$TEXTCOL"

} #TF_EditServiceRedraw






TF_EditService ()
{
    TF_EditServiceRedraw "$1"

    while [[ "$CH" != ['q''Q'] ]]; do

    if [ "$HEIGHT" != "$(/usr/bin/tput lines)" ] || [ "$WIDTH" != "$(/usr/bin/tput cols)" ]; then
	TF_EditServiceRedraw "$1"
    fi

    read -n 1 -t 1 -s CH

    case "$CH" in
	['m''M'])
		/usr/bin/man "${NAME[$1]}"
		TF_EditServiceRedraw "$1"
	;;

	['1''!'])
		clear
		/usr/bin/sudo /bin/systemctl enable "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Service enabled on startup"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;
	['2''@'])
		clear
		/usr/bin/sudo /bin/systemctl disable "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Service disabled on startup"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	['3''#'])
		clear
		/usr/bin/sudo /bin/systemctl start "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf %s "Service ${NAME[$1]} started"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;
	['4''$'])
		clear
		/usr/bin/sudo /bin/systemctl stop "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf %s "Service ${NAME[$1]} stopped"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	['5''%'])
		clear
		/usr/bin/sudo /bin/systemctl reload "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Service reloaded"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;
	['6''^'])
		clear
		/usr/bin/sudo /bin/systemctl daemon-reload "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Daemon reloaded"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;
	['7''&'])
		clear
		/usr/bin/sudo /bin/systemctl restart "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf %s "Service ${NAME[$1]} restarted"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	['8''*'])
		clear
		/usr/bin/sudo /bin/systemctl preset "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf %s "Restored defaults for ${NAME[$1]} service"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	['9''('])
		clear
		/usr/bin/sudo /bin/systemctl mask "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Service disabled on startup and masked"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;
	['0'')'])
		clear
		/usr/bin/sudo /bin/systemctl unmask "${NAME[$1]}.service"
		if [ "$(echo $?)" = "0" ]; then
		    printf '\n\n'%s "Service unmasked and available"
		fi
		TF_PAK
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	['j''J'])
		clear
		/usr/bin/sudo /bin/journalctl -u "${NAME[$1]}.service"
		TF_GetData
		TF_EditServiceRedraw "$1"
	;;

	*)
		
	;;
    esac

    done
    CH=""
} #TF_EditService






TF_GetData
TF_Redraw





#Main execution loop

while [[ "$CH" != ['q''Q'] ]]; do

    if [ "$HEIGHT" != "$(/usr/bin/tput lines)" ] || [ "$WIDTH" != "$(/usr/bin/tput cols)" ]; then
	TF_Redraw
    fi

    read -n 1 -t 1 -s CH

    if [ "$CH" = "$(echo -en "\033")" ];then
		CH3="$CH2"
		CH2="$CH"
	    continue
    elif	 [ "$k2" = "$(echo -en "\033")" -a "$k1" = "[" ];then
		CH3="$CH2"
		CH2="$CH"
	    continue
    fi

known_esc_seq=1
last_three_keys="$CH3$CH2$CH"


case "$last_three_keys" in
    "$up")
	if [ "$SPAGE" != "0" ]; then
		SPAGE="$(($SPAGE-1))"
		SBASE="$(($SPAGE*10))"
    		TF_Redraw
	fi
     ;;
   "$down")
    	if [ "${NAME[$(((SPAGE+1)*10))]}" != "" ]; then
		SPAGE="$(($SPAGE+1))"
		SBASE="$(($SPAGE*10))"
		TF_Redraw
	fi
    ;;
   "$left")
	if [ "$SPAGE" != "0" ]; then
		SPAGE="$(($SPAGE-1))"
		SBASE="$(($SPAGE*10))"
    		TF_Redraw
	fi
    ;;
   "$right")
	if [ "${NAME[$(((SPAGE+1)*10))]}" != "" ]; then
		SPAGE="$(($SPAGE+1))"
		SBASE="$(($SPAGE*10))"
		TF_Redraw
	fi
    ;;
    "$pgup")
	if [ "$SPAGE" != "0" ]; then
		SPAGE="$(($SPAGE-1))"
		SBASE="$(($SPAGE*10))"
    		TF_Redraw
	fi
    ;;
    "$pgdn")
	if [ "${NAME[$(((SPAGE+1)*10))]}" != "" ]; then
		SPAGE="$(($SPAGE+1))"
		SBASE="$(($SPAGE*10))"
		TF_Redraw
	fi
    ;;
    "$home")
	SPAGE="0"
	SBASE="0"
	TF_Redraw
    ;;

    *)
	known_esc_seq=0
    ;;

esac

if [ $known_esc_seq -eq 0 ];then

    case "$CH" in

		['1''2''3''4''5''6''7''8''9''0''!''@''#''$''%''^''&''*''('')'])
		    TV_NR="$CH"
		    TV_NR="$(TF_NumDecap "$TV_NR")"

		    if [[ "$TV_NR" = "0" ]]; then
			TV_NR="9"
		    else
			TV_NR="$(($TV_NR-1))"
		    fi
			TF_EditService "$(($SBASE+$TV_NR))"
			TF_GetData
			TF_Redraw
		;;


		
		['s''S'])
		    {
		    printf "\n\n\e[1;39m	----------------        SYSTEMCTL REPORT        ------------------\n\n\n\e[0;39m"
		    /bin/systemctl -all
		    printf "\n\n\e[1;39m	----------------          END OF REPORT          ------------------\n\n\n\e[0;39m"
		    } | /usr/bin/less -R
		    TF_GetData
		    TF_Redraw
		    ;;

		'c')
		    clear
		    /usr/bin/tput cnorm
		    /usr/bin/sudo /usr/bin/mcedit /etc/crontab
		    /usr/bin/sudo /usr/bin/crontab /etc/crontab
		    if [ "$?" != "0" ]; then
			TF_PAK
		    fi
		    /usr/bin/tput civis
		    CH=""
		    TF_Redraw
		;;
		['a''A'])
		    clear
		    /usr/bin/tput cnorm
		    /usr/bin/sudo /usr/bin/mcedit /etc/anacrontab
		    /usr/bin/tput civis
		    TF_Redraw
		;;
		['t''T'])
		    clear
		    /usr/bin/sudo /usr/sbin/dpkg-reconfigure tzdata
		    /usr/bin/tput civis
		    TF_Redraw
		;;
		['l''L'])
		    clear
		    /usr/bin/sudo /usr/sbin/dpkg-reconfigure locales
		    /usr/bin/tput civis
		    TF_Redraw
		;;
		['k''K'])
		    clear
		    /usr/bin/sudo /usr/sbin/dpkg-reconfigure keyboard-configuration
		    /usr/bin/tput civis
		    TF_Redraw
		;;
		'C')
		    clear
		    /usr/bin/sudo /usr/sbin/dpkg-reconfigure console-setup
		    /usr/bin/tput civis
		    TF_Redraw
		;;



		['>''.'])
		    if [ "${NAME[$(((SPAGE+1)*10))]}" != "" ]; then
			SPAGE="$(($SPAGE+1))"
			SBASE="$(($SPAGE*10))"
			TF_Redraw
		    fi
		    ;;
		['<'','])
		    if [ "$SPAGE" != "0" ]; then
			SPAGE="$(($SPAGE-1))"
			SBASE="$(($SPAGE*10))"
			TF_Redraw
		    fi
		    ;;
		'*')
		    if [ "$HEIGHT" != "$(/usr/bin/tput lines)" ] || [ "$WIDTH" != "$(/usr/bin/tput cols)" ]; then
			TF_Redraw
		    fi
		;;
    esac
fi

        CH3="$CH2"
	CH2="$CH"


done


TF_OnExit 0