#!/bin/bash



#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#  Author: Karol PaÅ‚ac (lolko), palac.karol@gmail.com



# This is an interactive desktop search for Midnight Commander



. /usr/local/lib/mcCLIinterface
. /usr/local/lib/mcglobals



if [[ -x /usr/bin/snap ]]; then
    SNAP='true'
else
    SNAP='false'
fi


OPTION="1"
PAGE="0"
PAGES="0"

CURR_ITEM=""
CURR_DESC=""
CURR_NAME=""

export -a RESULTS
export -a RES_TMP



TF_Redraw ()
{

    WIDTH="$(/usr/bin/tput cols)"
    HEIGHT="$(/usr/bin/tput lines)"

    PUTY="$(( ($HEIGHT / 2) - 10))"
    PUTX="$(( ($WIDTH / 2) - 45))"

    if [[ "$FILE" != "" ]]; then
        printfxy $PUTY $PUTX	"		Find App for: \e[1;$TEXTCOL $(TF_Nice 100 "$FILE")\e[0;$TEXTCOL\033[0K"
    else
        printfxy $PUTY $PUTX	"				Search for: \e[1;$TEXTCOL $(TF_Nice 100 "$PHRASE")\e[0;$TEXTCOL\033[0K"
    fi

    printfxy $(($PUTY+2)) $PUTX	"\e[1;$LINECOL	Page $((PAGE+1)) of $PAGES \e[0;$TEXTCOL\033[0K" #"

    I="1"
    for I in 1 2 3 4 5 6 7 8 9 10; do
                                                                                                                                                                
        if [[ "$OPTION" == "$I" ]]; then
            MARKER="[#]"
        else
            MARKER="[ ]"
        fi
        

        NAME="$(TF_Cut '|' 1 "${RESULTS[$(((PAGE*10)+I-1))]}")" #"
        CURR_ITEMS="$(TF_Cut '|' 3 "${RESULTS[$(((PAGE*10)+I-1))]}")" #"

        if [[ "$OPTION" == "$I" ]]; then
            CURR_NAME="$NAME"
            CURR_ITEM="$CURR_ITEMS"
            if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                CURR_ITEM_TMP="$(TF_Cut ":" 2 "$CURR_ITEM")"
                CURR_DESC="$(whatis "$CURR_ITEM_TMP" 2> /dev/null | head -1)"
            else
                CURR_DESC="$(TF_Cut '|' 2 "${RESULTS[$(((PAGE*10)+I-1))]}")" #"        
            fi
        fi

        if [[ "$CURR_ITEMS" == *".desktop" ]]; then
            STYLE="\e[1;32m"
        elif [[ "$CURR_ITEMS" == "comm:"* ]]; then
            STYLE="\e[0;32m"
        elif [[ "$CURR_ITEMS" == "https://"* ]] || [[ "$CURR_ITEMS" == "http://"* ]]; then
            STYLE="\e[1;36m"
        else
            STYLE="\e[1;$TEXTCOL"
        fi	    

        printfxy $(($PUTY+4+$I)) $PUTX	"	$MARKER  $STYLE$(TF_Nice 70 "$NAME") \e[0;$TEXTCOL\033[0K" #"

    done

    printfxy $(($PUTY+16)) $PUTX	"\e[0;$TEXTCOL$(TF_Nice 100 "$CURR_DESC") \033[0K"
    printfxy $(($PUTY+17)) $PUTX	"\033[0K"

    if [[ "$FILE" == "" ]]; then
        if [[ "$NO_LIMIT" == "true" ]]; then
            printfxy $(($PUTY+18)) $PUTX	"\e[1;$LINECOL[s] New Search     [a] Limit results\033[0K"
        else
            printfxy $(($PUTY+18)) $PUTX	"\e[1;$LINECOL[s] New Search     [a] Show all results\033[0K"
        fi    
    fi

    if [[ "$FILE" != "" ]] ; then
            printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL[o] Open with...   [a] Toggle all applications     [w] Open with and save as preferred\033[0K"
    elif [[ "$CURR_ITEM" == "https://"* ]] || [[ "$CURR_ITEM" == "http://"* ]]; then
            printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL[o] Open           [w] Open with...\033[0K"
    elif [[ "$CURR_ITEM" == *".desktop" ]]; then
            printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL[o] Open\033[0K"
    elif [[ "$CURR_ITEM" =~ "comm:"* ]]; then
            printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL[o] Open\033[0K"    
    else
            printfxy $(($PUTY+19)) $PUTX	"\e[1;$LINECOL[o] Open           [w] Open with...      [d] Go to Dir \033[0K"
    fi

    if [[ "$CURR_ITEM" == *".desktop" ]] || [[ "$CURR_ITEM" =~ "comm:"* ]]; then
        printfxy $(($PUTY+20)) $PUTX	"\e[1;$LINECOL[?] Info\033[0K"
    elif [[ "$CURR_ITEM" != "https://"* ]] && [[ "$CURR_ITEMS" != "http://"* ]]; then
        printfxy $(($PUTY+20)) $PUTX	"\e[1;$LINECOL[?] Info           [3] View\033[0K"    
    fi
    printfxy $(($PUTY+22)) $PUTX	"[q] Cancel\e[0;$TEXTCOL \033[0K"

} #Redraw








TF_GetData ()
{


    if [[ "$NO_LIMIT" == "true" ]]; then
        LIMIT="0"
    else
        LIMIT="$MC_RECOLL_MAX"
    fi
    if [[ "$NO_LIMIT" == "true" ]]; then
        WWW_LIMIT="500"
    else
        WWW_LIMIT="$MC_WWW_FIREFOX_MAX"
    fi

    clear
    printf "Searching..."
    OPTION="1"
    PAGE="0"

    RESS=""
    
    if [[ "$FILE" != "" ]]; then

        if [[ "$NO_LIMIT" == 'true' ]]; then
            RESS="$RESS$(/usr/local/lib/mcparseapps.pl)"
        else
            RESS="$RESS$(/usr/local/lib/mcparseapps.pl | /bin/grep "$MIMETYPE")"
        fi

        MIMETYPE_S="${MIMETYPE//\//|}"
        MIMETYPE_S="${MIMETYPE_S//-/|}"


        if [[ "$MIMETYPE_S" != "|"* ]] && [[ "$MIMETYPE_S" != *"|" ]]; then 
            mapfile -t RESULTS < <(compgen -c | /bin/grep -E "$MIMETYPE_S")
            for RES in "${RESULTS[@]}"; do
                [[ "$RES" =~ "TF_"* ]] && continue
                [[ "$RES" =~ "MCV_"* ]] && continue
                [[ "$RES" =~ "printfxy" ]] && continue
                RESS="$RESS""$RES|$RES|comm:$RES
"    
            done
        fi

    else
        if [[ "$MC_SEARCH_APPS" == 'true' && "${PHRASE// /}" != ""  ]]; then
            RESS="$RESS""$(/usr/local/lib/mcparseapps.pl | /bin/grep '|_Display_|' | /bin/grep -i "$PHRASE")"
        fi

        if [[ "$MC_SEARCH_RECENT" == 'true' ]]; then
            mapfile -t RESULTS < <(/bin/grep '<bookmark href="' ~/.local/share/recently-used.xbel | /usr/bin/cut -d'"' -f 2)
            RESS1=""
            for RES in "${RESULTS[@]}"; do
                SFILE="${RES/file:\/\//}"
                SFILE="$(TF_UrlDecode "$SFILE")"
                SFILE="$(TF_htmlDecode "$SFILE")"
                NAME="${SFILE##*/}"
                RESS1="$RESS1""$NAME|$SFILE|$SFILE
"
            done

            [[ "$PHRASE" != "" ]] && RESS1="$(printf %s "$RESS1" | /bin/grep -i "$PHRASE")"
            RESS="$RESS$RESS1"

        fi

        if [[ "$MC_SEARCH_RECOLL" == 'true' ]] && [[ "${PHRASE// /}" != "" ]] && [[ -x /usr/bin/recoll ]]; then
            
            mapfile -t RESULTS < <(recoll -n "$LIMIT" -t -q "$PHRASE" 2> /dev/null)
            for RES in "${RESULTS[@]}"; do
                [[ "$RES" != *"["* ]] && continue
                SPATH="$(TF_Cut '[' 2 "$RES")"
                SPATH="$(TF_Cut ']' 1 "$SPATH")"
                SPATH="${SPATH/file:\/\//}"
    
                NAME="$(TF_Cut '[' 4 "$RES")"
                NAME="$(TF_Cut ']' 1 "$NAME")"

                RESS="$RESS""$NAME|$SPATH|$SPATH
"    
            done

        elif [[ "$PHRASE" != "" ]]; then
            mapfile -t RESULTS < <( find ~ -iname '*'"$PHRASE"'*' -not -path "$HOME/.*")
            for RES in "${RESULTS[@]}"; do
                NAME="${RES##*/}"
                RESS="$RESS""$NAME|$RES|$RES
"    
            done


        fi

        if [[ "$MC_WWW_FIREFOX" == 'true' ]] && [[ "${PHRASE// /}" != "" ]]; then
            export -a DBSES
            mapfile -t DBSES < <(find ~/.mozilla/firefox -name places.sqlite)

            PHRASE_SQL="$(TF_SQLize "$PHRASE")"
            PHRASE_SQL="${PHRASE_SQL//\"/}"

            SQL="select 'WWW: ' || replace(replace(coalesce(p.title, p.url),'|',''), char(10), ' ') || '|' || replace(replace(coalesce(p.description,''),'|',''), char(10), ' ') || '|' || replace(coalesce(p.url, ''),'|','') 
from moz_places p 
where (p.title like '%""$PHRASE_SQL""%' or p.description like '%""$PHRASE_SQL""%' or p.url like '%""$PHRASE_SQL""%')
order by p.last_visit_date DESC limit $WWW_LIMIT
"


            for DB in "${DBSES[@]}"; do
                DB_CP="/tmp/places.sqlite"
                cp "$DB" "$DB_CP"
                RESS="$RESS$(sqlite3 "$DB_CP" "$SQL")
"
            done
        fi


        if [[ "$MC_SEARCH_COMMANDS" == 'true' ]]; then
            if [[ "${PHRASE// /}" != "" ]]; then
                mapfile -t RESULTS < <(compgen -c | /bin/grep -E "$PHRASE")
                for RES in "${RESULTS[@]}"; do
                    [[ "$RES" =~ "TF_"* ]] && continue
                    [[ "$RES" =~ "MCV_"* ]] && continue
                    [[ "$RES" =~ "printfxy" ]] && continue
                    RESS="$RESS""$RES|$RES|comm:$RES
"    
                done
            fi
        fi
    fi

    PAGES="$(printf %s "$RESS" | wc -l)"
    PAGES=$((PAGES/10+1))
    [[ "$PAGES" == "0" ]] && PAGES="1"

    mapfile -t RESULTS < <(printf %s "$RESS" )
    clear

} #GetData





TF_Search ()
{                    
                    
    if [[ "$FILE" == "" ]]; then
    /usr/bin/tput cnorm
                    
    WIDTH="$(/usr/bin/tput cols)"
    HEIGHT="$(/usr/bin/tput lines)"

    PUTY="$(( ($HEIGHT / 2) - 10))"
    PUTX="$(( ($WIDTH / 2) - 45))"

    printfxy $PUTY $PUTX	"		Search for: \e[1;$TEXTCOL \033[0K"
    read PHRASE
    /usr/bin/tput civis
    clear
    TF_GetData
    CH=""
    TF_Redraw
    fi

} #TF_Search









PHRASE=""

MIMETYPE=""
FILE=""

NO_LIMIT="false"


# Read parameters
while [[ "$1" != "" ]]; do

    ARG="$1"
    shift

    case "$ARG" in
        '-phrase')
            PHRASE="$1"
            break
        ;;
        '-mimetype')
            MIMETYPE="$1"
            shift
        ;;
        '-file')
            FILE="$1"
            shift
        ;;
        '-help')
            HELP="
mcsearch [-phrase|-mimetype|-file|-help] [value]

    CLI desktop search tool
    options:
        -phrase [STR]           open with a search phrase
        -file [FILE]            open dialog to find suitable application to open a file
        -mimetype [MIMETYPE]    provide resolve mimetype to -file option
        -help                   show this
"
            printf %s "$HELP"
            /usr/bin/tput cnorm
            exit 0
        ;;
    esac
done

if [[ "$FILE" != "" ]] && [[ "$MIMETYPE" == "" ]]; then
    if [[ "$FILE" == "http://"* || "$FILE" == "https://"* ]]; then
        MIMETYPE="text/html"
    else 
        MIMETYPE="$(/usr/bin/mimetype -b "$FILE")"
    fi
fi


TF_GetData
TF_Redraw

if [[ "$FILE" == "" ]] && [[ "$PHRASE" == "" ]]; then
    TF_Search
fi


#Main execution loop

while [[ "$CH" != ['q''Q'] ]]; do

    if [ "$HEIGHT" != "$(/usr/bin/tput lines)" ] || [ "$WIDTH" != "$(/usr/bin/tput cols)" ]; then
	TF_Redraw
    fi

    read -n 1 -s CH

    if [ "$CH" = "$(echo -en "\033")" ];then
		CH3="$CH2"
		CH2="$CH"
	    continue
    fi

known_esc_seq=1
last_three_keys="$CH3$CH2$CH"


case "$last_three_keys" in
    "$up")
	OPTION="$(($OPTION-1))"
        if [[ "$OPTION" == "0" ]]; then 		
            if [[ "$PAGE" != "0" ]]; then
                OPTION="10"
                PAGE="$(($PAGE-1))"
                clear
            else
                OPTION="1"
            fi
	fi
        TF_Redraw
     ;;
    "$down")
        OPTION="$(($OPTION+1))"
        if [[ "$OPTION" == "11" ]]; then
    	    if [ "${RESULTS[$(((PAGE+1)*10))]}" != "" ]; then
		PAGE="$(($PAGE+1))"
                OPTION="1"
                clear
            else
                OPTION="10"
            fi
	fi
	TF_Redraw
    ;;
   "$left")
	if [ "$PAGE" != "0" ]; then
		PAGE="$(($PAGE-1))"
                clear
    		TF_Redraw
	fi
    ;;
   "$right")
	if [ "${RESULTS[$(((PAGE+1)*10))]}" != "" ]; then
		PAGE="$(($PAGE+1))"
		clear
                TF_Redraw
	fi
    ;;
    "$pgup")
	if [ "$PAGE" != "0" ]; then
		PAGE="$(($PAGE-1))"
                clear
                TF_Redraw
	fi
    ;;
    "$pgdn")
	if [ "${RESULTS[$(((PAGE+1)*10))]}" != "" ]; then
		PAGE="$(($PAGE+1))"
		clear
                TF_Redraw
	fi
    ;;
    "$home")
	PAGE="0"
	OPTION="1"
	TF_Redraw
    ;;
    "$end")
        PAGE="$(($PAGES-1))"
        OPTION="1"
        TF_Redraw
    ;;
    "$enter")
        CH='o'
        known_esc_seq=0
    ;;
    "$f1")
        CH='?'
        known_esc_seq=0
    ;;
    "$f2")
        CH='2'
        known_esc_seq=0
    ;;
    "$f3")
        CH='3'
        known_esc_seq=0
    ;;
    "$f4")
        CH='4'
        known_esc_seq=0
    ;;
    "$f5")
        CH='5'
        known_esc_seq=0
    ;;
    "$f6")
        CH='6'
        known_esc_seq=0
    ;;
    "$f7")
        CH='d'
        known_esc_seq=0
    ;;
    "$f8")
        CH='8'
        known_esc_seq=0
    ;;
    "$f9")
        CH='9'
        known_esc_seq=0
    ;;
    "$f10")
        CH='10'
        known_esc_seq=0
    ;;
    "$f11")
        CH='11'
        known_esc_seq=0
    ;;
    "$f12")
        CH='12'
        known_esc_seq=0
    ;;

    *)
        known_esc_seq=0
    ;;

esac



if [ $known_esc_seq -eq 0 ];then

    case "$CH" in
		['w''W'])


                    if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                        CURR_ITEM="$(TF_Cut ':' 2 "$CURR_ITEM")"
                        clear
                        export MC_SILENT="true"
                        /usr/local/bin/mccommand.sh each "$CURR_ITEM" "$FILE"
                        CH=""
                        TF_PAK
                        clear
                        TF_Redraw

                    elif [[ "$FILE" != "" ]]; then
                        clear
                        if [[ "$CURR_ITEM" == "/usr/share/applications/"*".desktop" ]]; then
                            DESKTOP_FILE="${CURR_ITEM##*/}"
                            if [[ ! -f ~/.local/share/applications/defaults.list ]]; then
                                printf "[Default Applications]\n$MIMETYPE=$DESKTOP_FILE" > ~/.local/share/applications/defaults.list
                            else
                                TMP="$(grep -v -i "^$MIMETYPE=" ~/.local/share/applications/defaults.list)"
                                TMP="$TMP\n$MIMETYPE=$DESKTOP_FILE\n"
                                printf "$TMP" > ~/.local/share/applications/defaults.list
                            fi
                        fi
                        /usr/local/bin/mcopen -w "$CURR_ITEM" -- "$FILE" 2>&1 > "$MC_LOG_FILE"
                        clear
                        CH=""
                        TF_Redraw

                    elif [[ "$CURR_ITEM" != *".desktop" ]]; then
		        clear
                        /usr/bin/tput cnorm
                        /usr/local/bin/mcsearch -file "$CURR_ITEM"
		        /usr/bin/tput civis
                        clear
		        CH=""
		        TF_Redraw
                    fi
		;;
                ['o''O'])
                    if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                        CURR_ITEM="$(TF_Cut ':' 2 "$CURR_ITEM")"
                        clear
                        eval "$CURR_ITEM"
                        CH=""
                        TF_PAK
                        clear
                        TF_Redraw
                    elif [[ "$FILE" != "" ]]; then
                        clear
                        /usr/local/bin/mcopen -w "$CURR_ITEM" -- "$FILE" 2>&1 > "$MC_LOG_FILE"
                        clear
                        CH=""
                        TF_Redraw
                    else
                        clear
                        /usr/local/bin/mcopen -- "$CURR_ITEM" 2>&1 > "$MC_LOG_FILE"
                        CH=""
                        TF_Redraw
                    fi
                ;;
                '3')
                    if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                        :
                    elif [[ "$FILE" != "" ]]; then
                        :
                    else
                        clear
                        /usr/local/bin/mcquickview.sh "$CURR_ITEM"
                        clear
                        CH=""
                        TF_Redraw
                    fi
                ;;
                ['d''D'])
                    if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                        :
                    elif [[ "$FILE" != "" ]]; then
                        :
                    else
                        clear
                        if [[ ! -d "$CURR_ITEM" ]]; then
                            CURR_ITEM="$(dirname "$CURR_ITEM")"
                        fi
                        /usr/bin/tput cnorm
                        /usr/local/bin/mcopen "$CURR_ITEM"
                        /usr/bin/tput civis
                        CH=""
                        clear
                        TF_Redraw
                    fi
                ;;
                ['a''A'])
		    clear
                    if [[ "$NO_LIMIT" == "false" ]]; then
                        NO_LIMIT="true"
                    else
                        NO_LIMIT="false"
                    fi
		    TF_GetData
		    CH=""
		    TF_Redraw
                ;;
		['s''S'])
                    TF_Search
    		;;
		'?')
		    clear
		    if [[ "$CURR_ITEM" =~ "comm:"* ]]; then
                        CURR_ITEM="$(TF_Cut ':' 2 "$CURR_ITEM")"
                        man "$CURR_ITEM"

                    elif [[ "$CURR_ITEM" == *".desktop" ]]; then
                        COMM="$(grep -m 1 '^Exec=' "$CURR_ITEM")"
                        COMM="$(TF_Cut '=' 2 "$COMM")"
                        COMM1="$(TF_Cut ' ' 1 "$COMM")"
                        
                        MAN_PAGE="$(man --pager=cat "$COMM1")"
                        
                        INFO="\e[1;$TEXTCOL $(TF_Nice 0 "$CURR_NAME")
-----------------------------------------------------
\e[1;$LINECOL Description: \e[0;$TEXTCOL$(TF_Nice 0 "$CURR_DESC")
\e[1;$LINECOL Exec: \e[0;$TEXTCOL$(TF_Nice 0 "$COMM")



\e[1;$LINECOL
\e[1;$LINECOL Manual:
\e[0;$TEXTCOL
$(TF_Nice 0 "$MAN_PAGE")

"
                        printf "$INFO" | less -R                    
                        clear
                        CH=""
                        TF_Redraw

                    else
                        /usr/local/bin/mcfileinfo "$CURR_ITEM" | less -R
		    fi
                    clear
		    CH=""
		    TF_Redraw
		;;


		'*')
		    if [ "$HEIGHT" != "$(/usr/bin/tput lines)" ] || [ "$WIDTH" != "$(/usr/bin/tput cols)" ]; then
			TF_Redraw
		    fi
		;;
    esac
fi

        CH3="$CH2"
	CH2="$CH"


done


TF_OnExit 0