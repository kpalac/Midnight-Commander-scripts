#!/bin/bash

#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#  Author: Karol PaÅ‚ac (lolko), palac.karol@gmail.com



#  Tool for mass-generating thumbnails in Midnight Commander


export TV_THUMB_SIZE="128"
export TV_THUMB_SIZE_X2="$TV_THUMB_SIZE""x""$TV_THUMB_SIZE"



TF_GetDuration () {

    VID="$1"
    DURATION="$(/usr/bin/exiftool "$VID" | /bin/grep '^Duration  ')"
    DURATION="$(TF_Cut ": " 2- "$DURATION")"
    DURATION_H="$(TF_Cut ":" 1 "$DURATION")"
    DURATION_M="$(TF_Cut ":" 2 "$DURATION")"
    DURATION_S="$(TF_Cut ":" 3 "$DURATION")"

    while [[ "$DURATION_H" == "0"* ]]; do
	DURATION_H="${DURATION_H/0/}"
    done
    while [[ "$DURATION_M" == "0"* ]]; do
	DURATION_M="${DURATION_M/0/}"
    done
    while [[ "$DURATION_S" == "0"* ]]; do
	DURATION_S="${DURATION_S/0/}"
    done

    [[ "$DURATION_H" = "" ]] && DURATION_H="0"
    [[ "$DURATION_M" = "" ]] && DURATION_M="0"
    [[ "$DURATION_S" = "" ]] && DURATION_S="0"

    DURATION_H="$(($DURATION_H*3600))"
    DURATION_M="$(($DURATION_M*60))"
    DURATION="$(($DURATION_H+$DURATION_M+$DURATION_S))"
    printf "$DURATION"

} #TF_GetDuration
export -f TF_GetDuration



TF_TNConv () {

    MODE="$1"
    shift
    SOURCE="$1"
    shift
    TARGET="$1"

    [[ "$VERBOSE" == 'true' ]] && echo "Generating thumbnail for $SOURCE ..."

    if [[ "$MODE" = "image" ]]; then
	/usr/bin/convert -thumbnail $TV_THUMB_SIZE_X2 "$SOURCE"$OPTS "$TARGET"
    elif [[ "$MODE" = "pdf" ]]; then
	/usr/bin/convert -thumbnail $TV_THUMB_SIZE_X2 "$SOURCE"[0] "$TARGET"
    elif [[ "$MODE" = "djvu" ]]; then
	/usr/bin/ddjvu -format=ppm -page=1 -size=$TV_THUMB_SIZE_X2 "$SOURCE" "$TARGET"
    elif [[ "$MODE" = "oddocs" ]]; then
	/usr/bin/unzip -p "$SOURCE" Thumbnails/thumbnail.png > "$TARGET"
	/usr/bin/convert -thumbnail $TV_THUMB_SIZE_X2 "$TARGET" "$TARGET"
    elif [[ "$MODE" = "msdocs" ]]; then
	/usr/bin/gsf-office-thumbnailer -s $TV_THUMB_SIZE -i "$SOURCE" -o "$TARGET"
    elif [[ "$MODE" = "epub" ]]; then
	/usr/local/bin/mcepubparse.pl thumbnail "$SOURCE" "$TARGET"
	/usr/bin/convert -thumbnail $TV_THUMB_SIZE_X2 "$TARGET" "$TARGET"
    elif [[ "$MODE" = "vid" ]]; then
	DUR="$(TF_GetDuration "$SOURCE")"
	FRAME="$(/usr/bin/shuf -i 0-$DUR -n1)"
	/usr/bin/ffmpeg -ss ${FRAME} -i "$SOURCE" -vframes 1 -q:v 2 "$TARGET"
	/usr/bin/convert -thumbnail $TV_THUMB_SIZE_X2 "$TARGET" "$TARGET"
    fi
    if [[ "$?" == "0" ]]; then
        [[ "$VERBOSE" == "true" ]] && echo "Thumbnail created for $SOURCE"
    fi

} #TF_TNConv
export -f TF_TNConv




TF_TNCheckFile () {
    SOURCE="$1"
    TARGET="$(TF_ThumbnailPath "$SOURCE")"
    if [[ -f "$TARGET" ]]; then
        TARGET_MT="$(/usr/bin/stat -c %Y "$TARGET")"
    else
        TARGET_MT="0"
    fi
    
    shift
    MODE="$1"
    shift
    DIR_MT="$1"

    FILE_MT_Y="$(/usr/bin/stat -c %Y "$SOURCE")"
    FILE_MT_Z="$(/usr/bin/stat -c %Z "$SOURCE")"

    if [[ $FILE_MT_Y -lt $DIR_MT ]] && [[ $FILE_MT_Y -lt $DIR_MT ]]; then 
        [[ "$VERBOSE" == "true" ]] && echo "No modification since last directory thumbnail generation ($SOURCE)"
        return 0
    fi

    if [[ ! -f "$TARGET" ]] || [[ $FILE_MT_Y -gt $TARGET_MT || $FILE_MT_Z -gt $TARGET_MT ]]; then
	TF_TNConv "$MODE" "$SOURCE" "$TARGET"
    else
        [[ "$VERBOSE" == "true" ]] && echo "No modification since last thumbnail generation ($SOURCE)"
    fi

} #TF_TNCheckFile
export -f TF_TNCheckFile






TF_TNGen () {

    FILE="$1"
    FILE="$(/bin/readlink -f "$FILE")"
    shift
    DIR_MT="$1"

    if [[ "${FILE,,}" =~ .*.(jpg|png|bmp|jpeg|gif|svg|xpm|xps|pcx|pcc) ]]; then
	TF_TNCheckFile "$FILE" image "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(pdf|ps) ]]; then
	TF_TNCheckFile "$FILE" pdf "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(djvu|djv) ]]; then
	TF_TNCheckFile "$FILE" djvu "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(epub) ]]; then
	TF_TNCheckFile "$FILE" epub "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(odt|ods|odp) ]]; then
	    TF_TNCheckFile "$FILE" oddocs "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(doc|docx|xls|xlsx|ppt|pptx) ]]; then
	TF_TNCheckFile "$FILE" msdocs "$DIR_MT"
    elif [[ "${FILE,,}" =~ .*.(avi|mpg|mpeg|mp4|rmvb|mkv) ]]; then
	TF_TNCheckFile "$FILE" vid "$DIR_MT"
    fi
    
} #TF_TNGen
export -f TF_TNGen




TF_TNGenDir () {

    FILE="$1"
    FILE="$(/bin/readlink -f "$FILE")"
    DIR="${FILE%/*}"
    if [[ ! -d "$DIR" ]]; then
        [[ "$VERBOSE" == 'true' ]] && echo "Not a directory ($DIR)!"
        return 0
    fi
    if [[ "$DIR" == "$HOME/.thumbnails/"* ]]; then 
        [[ "$VERBOSE" == 'true' ]] && echo "Cannot thumbnail a thumbnail directory!"
        return 0
    fi

    if [[ ! -f "$DIR/.mc_thumbnails" ]]; then
        DIR_MT="0"
    else
        if [[ "$(< "$DIR/.mc_thumbnails")" == "processing" ]]; then
            [[ "$VERBOSE" == "true" ]] && echo "Directory thumbnailing already in progress... aborting ..."            
            return 0
        fi
        DIR_MT="$(/usr/bin/stat -c %Y "$DIR/.mc_thumbnails")"
    fi        

    printf "processing" > "$DIR/.mc_thumbnails"
    for FILE in "$DIR"/*; do
        TF_TNGen "$FILE" "$DIR_MT"
    done
    printf "done" > "$DIR/.mc_thumbnails"
    [[ "$VERBOSE" == "true" ]] && echo "Directory thumbnailing finished..."            

} #TF_TNGenDir
export -f TF_TNGenDir





VERBOSE="false"
PARAMS_END="false"
PROCESS_DIR="false"

if [[ "$1" != "///source" ]]; then

    . /usr/local/lib/mcglobals
    VERBOSE="true"

    while [[ "$1" != "" ]]; do

        ARG="$1"
        shift

        case "$ARG" in
            '--') 
                PARAMS_END="true" 
            ;;
            '-dir')
                if [[ "$PARAMS_END" == "false" ]]; then
                    PROCESS_DIR="true"
                else
                    if [[ "$PROCESS_DIR" == "true" ]]; then
                        TF_TNGenDir "$ARG"
                    else
                        TF_TNGen "$ARG"
                    fi
                fi
            ;;
            '-help')
                if [[ "$PARAMS_END" == "false" ]]; then
                    T_HELP="
mcthumbnailer [option] [files]

    Generate thumbnails for file/directory to use in GUI apps

    option:
        -dir       Generate thumbnails for all files in file's base directory
        -help      show this


"
                    printf %s "$T_HELP"
                else
                    if [[ "$PROCESS_DIR" == "true" ]]; then
                        TF_TNGenDir "$ARG"
                    else
                        TF_TNGen "$ARG"
                    fi
                fi
                
            ;;
            *)
                if [[ "$PROCESS_DIR" == "true" ]]; then
                    TF_TNGenDir "$ARG"
                else
                    TF_TNGen "$ARG"
                fi

            ;;

        esac
    done

fi

